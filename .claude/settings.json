{
  "env": {
    "DISABLE_TELEMETRY": "1",
    "DISABLE_ERROR_REPORTING": "1",
    "DISABLE_BUG_COMMAND": "1",
    "API_TIMEOUT_MS": "600000"
  },
  "permissions": {
    "allow": [
      "Read(**)",
      "Write(src/**)",
      "Write(docs/**)",
      "Write(.tmp/**)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push origin*:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(npm install:*)",
      "Bash(pnpm install:*)",
      "Bash(rm *)",
      "Bash(ls:*)",
      "Bash(cat **)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(pwd:*)",
      "Bash(find:*)",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm run test:*)",
      "Bash(pnpm run build:*)",
      "Bash(mv:*)",
      "Bash(gemini google_web_search:*)",
      "Bash(docker compose up -d --build:*)",
      "Bash(osascript -e:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_drag",
      "mcp__playwright__browser_hover",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_file_upload",
      "mcp__playwright__browser_handle_dialog",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_navigate_back",
      "mcp__playwright__browser_navigate_forward",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_pdf_save",
      "mcp__playwright__browser_network_requests",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_tab_list",
      "mcp__playwright__browser_tab_new",
      "mcp__playwright__browser_tab_select",
      "mcp__playwright__browser_tab_close",
      "mcp__playwright__browser_generate_playwright_test"
    ],
    "deny": [
      "Bash(sudo:*)",
      "Bash(rm:*)",
      "Bash(rm -rf:*)",
      "Read(.env.*)",
      "Read(id_rsa)",
      "Read(id_ed25519)",
      "Read(**/*token*)",
      "Read(**/*key*)",
      "Write(.env*)",
      "Write(**/secrets/**)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(nc:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm remove:*)",
      "Bash(psql:*)",
      "Bash(mysql:*)",
      "Bash(mongod:*)",
      "mcp__serena__create_text_file",
      "mcp__serena__delete_lines",
      "mcp__serena__execute_shell_command",
      "mcp__serena__replace_lines"
    ]
  },
  "model": "sonnet",
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "github",
    "context7",
    "playwright"
  ],
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] $USER: Bash - $(jq -r '.tool_input.command')\" >> ~/.claude/command_history.log"
          }
        ]
      },
      {
        "matcher": "Read",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] $USER: Read - $(jq -r '.tool_input.file_path')\" >> ~/.claude/command_history.log"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] $USER: Write - $(jq -r '.tool_input.file_path')\" >> ~/.claude/command_history.log"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] $USER: $(jq -r '.tool_name') - $(jq -r '.tool_input.file_path')\" >> ~/.claude/command_history.log"
          }
        ]
      },
      {
        "matcher": "TodoWrite",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] $USER: TodoWrite - $(jq -r '.tool_input.todos | length') items\" >> ~/.claude/command_history.log"
          }
        ]
      },
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] $USER: Task - $(jq -r '.tool_input.description')\" >> ~/.claude/command_history.log"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path | select(endswith(\".js\") or endswith(\".ts\") or endswith(\".json\") or endswith(\".tsx\"))' | xargs -r npx prettier --write"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '\"display notification \\\"\" + .message + \"\\\" with title \\\"\" + .title + \"\\\" sound name \\\"Glass\\\"\"' | xargs -I {} osascript -e '{}'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "osascript -e 'display notification \"作業が完了しました。\" with title \"Claude Code\" sound name \"Glass\"'"
          }
        ]
      }
    ]
  }
}